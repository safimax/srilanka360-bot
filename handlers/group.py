from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from states.bot_states import BotStates
from utils.text_utils import get_text, get_keyboard

router = Router()

@router.callback_query(F.data == "—Å–µ–º—å—è__–∫–æ–º–ø–∞–Ω–∏—è_–¥—Ä—É–∑–µ–π")
async def handle_family_group(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å–µ–º—å—é/–¥—Ä—É–∑–µ–π"""
    await state.update_data(group_type="family")
    await show_family_adults(callback.message, state)
    await callback.answer()

@router.callback_query(F.data == "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ__–π–æ–≥–∞—Ç—É—Ä")
async def handle_event_group(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ/—Ç—É—Ä"""
    await state.update_data(group_type="event")
    await show_event_size(callback.message, state)
    await callback.answer()

@router.callback_query(F.data.in_(["1", "2", "3", "4", "5", "6", "7", "8", "9", "10+"]))
async def handle_adults_count(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∑—Ä–æ—Å–ª—ã—Ö"""
    adults_count = callback.data
    await state.update_data(adults_count=adults_count)
    
    # –ü–æ–∫–∞ —á—Ç–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –∑–¥–µ—Å—å - –ø–æ–∫–∞–∂–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    data = await state.get_data()
    summary = f"–û—Ç–ª–∏—á–Ω–æ! –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞:\n\n"
    summary += f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {data.get('entry_point', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    summary += f"‚Ä¢ –¢–∏–ø –≥—Ä—É–ø–ø—ã: –°–µ–º—å—è/–î—Ä—É–∑—å—è\n" 
    summary += f"‚Ä¢ –í–∑—Ä–æ—Å–ª—ã—Ö: {adults_count}\n"
    
    if data.get('villa_id'):
        summary += f"‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–∏–ª–ª–∞: {data['villa_id']}\n"
    if data.get('villa_input_raw'):
        summary += f"‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–ª–ª—É: {data['villa_input_raw']}\n"
    if data.get('dream_description'):
        summary += f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {data['dream_description'][:100]}...\n"
        summary += f"‚Ä¢ –ë—é–¥–∂–µ—Ç: {data.get('budget_mentioned', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
    
    summary += "\n‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ù–∞—à —ç–∫—Å–ø–µ—Ä—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    
    keyboard = get_keyboard(["üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º —Å–µ–π—á–∞—Å"])
    await callback.message.edit_text(summary, reply_markup=keyboard)
    await callback.answer()

async def show_group_type(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≥—Ä—É–ø–ø—ã"""
    text = get_text("screens.group_type.message")
    keyboard = get_keyboard(["üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è / –ö–æ–º–ø–∞–Ω–∏—è –¥—Ä—É–∑–µ–π", "üßò‚Äç‚ôÄÔ∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ / –ô–æ–≥–∞-—Ç—É—Ä"])
    
    await message.answer(text, reply_markup=keyboard)
    await state.set_state(BotStates.GROUP_TYPE)

async def show_family_adults(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∑—Ä–æ—Å–ª—ã—Ö"""
    text = "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –≤–∑—Ä–æ—Å–ª—ã—Ö?"
    buttons = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10+"]
    keyboard = get_keyboard(buttons)
    
    await message.answer(text, reply_markup=keyboard)
    await state.set_state(BotStates.FAMILY_ADULTS)

async def show_event_size(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    text = "–ù–∞ –∫–∞–∫–æ–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—ã –∏—â–µ—Ç–µ –≤–∏–ª–ª—É?"
    await message.answer(text + "\n\n(–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏)")