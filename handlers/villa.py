from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from states.bot_states import BotStates
from utils.text_utils import get_text, get_keyboard

router = Router()

@router.callback_query(F.data == "–µ—Å—Ç—å_—Å—Å—ã–ª–∫–∞–Ω–æ–º–µ—Ä_–≤–∏–ª–ª—ã")
async def handle_have_link(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–ï—Å—Ç—å —Å—Å—ã–ª–∫–∞/–Ω–æ–º–µ—Ä –≤–∏–ª–ª—ã'"""
    text = "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–ª–ª—É –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –µ—ë –Ω–æ–º–µ—Ä:"
    await callback.message.edit_text(text)
    await state.set_state(BotStates.VILLA_INPUT)
    await callback.answer()

@router.callback_query(F.data == "—Ö–æ—á—É_–æ–ø–∏—Å–∞—Ç—å_–º–µ—á—Ç—É")
async def handle_want_dream(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–•–æ—á—É –æ–ø–∏—Å–∞—Ç—å –º–µ—á—Ç—É'"""
    text = get_text("screens.dream_form.message")
    await callback.message.edit_text(text)
    await state.set_state(BotStates.DREAM_FORM)
    await callback.answer()

@router.message(BotStates.VILLA_INPUT)
async def handle_villa_input_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏/–Ω–æ–º–µ—Ä–∞"""
    user_input = message.text.strip()
    await state.update_data(villa_input_raw=user_input)
    
    confirmation = f"–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ–¥–∞–¥–∏–º —ç–∫—Å–ø–µ—Ä—Ç—É: \"{user_input}\""
    await message.answer(confirmation)
    
    from handlers.group import show_group_type
    await show_group_type(message, state)

@router.message(BotStates.DREAM_FORM)
async def handle_dream_form_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –º–µ—á—Ç—ã"""
    dream_text = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞
    budget = extract_budget_from_text(dream_text)
    
    await state.update_data(
        dream_description=dream_text,
        budget_mentioned=budget or "not_specified"
    )
    
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –£—á—Ç–µ–º –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è.")
    
    from handlers.group import show_group_type
    await show_group_type(message, state)

def extract_budget_from_text(text: str) -> str:
    """–ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    import re
    patterns = [
        r'(\d+)\s*\$',
        r'\$\s*(\d+)', 
        r'–¥–æ\s+(\d+)\s*\$',
        r'(\d+)\s*–¥–æ–ª–ª–∞—Ä–æ–≤'
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            return f"{match.group(1)}$"
    
    return None

async def show_villa_fork(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑ —Ä–∞–∑–≤–∏–ª–∫–∏ –≤—ã–±–æ—Ä–∞ –≤–∏–ª–ª—ã"""
    text = get_text("screens.villa_fork.message")
    keyboard = get_keyboard(["üìé –ï—Å—Ç—å —Å—Å—ã–ª–∫–∞/–Ω–æ–º–µ—Ä –≤–∏–ª–ª—ã", "üå¥ –•–æ—á—É –æ–ø–∏—Å–∞—Ç—å –º–µ—á—Ç—É"])
    
    await message.answer(text, reply_markup=keyboard)

    await state.set_state(BotStates.VILLA_FORK)
